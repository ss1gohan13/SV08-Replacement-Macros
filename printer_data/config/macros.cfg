[gcode_macro _ALL_FAN_OFF]
gcode:
    M106 S0
    M107

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 4.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 30.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 0     ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 0     ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 600     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : "filament_switch_sensor filament_sensor"    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:
    # Calculate dynamic park positions based on printer axis maximums
    {% set max_x = printer.toolhead.axis_maximum.x %}
    {% set max_y = printer.toolhead.axis_maximum.y %}
    
    # Set park positions (you can adjust the offset as needed)
    # Using max - 10mm for safety margin
    SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=custom_park_x VALUE={max_x - 10}
    SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=custom_park_y VALUE={max_y - 10}
    SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=park_at_cancel_x VALUE={max_x - 10}
    SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=park_at_cancel_y VALUE={max_y - 10}

[gcode_macro BEEP]
gcode:
  SET_PIN PIN=beeper VALUE=1
  G4 P10  
  SET_PIN PIN=beeper VALUE=0

[gcode_macro CENTER]
description: Move the toolhead to the center of objects to be printed, or center of build plate
gcode:
    {% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
    {% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
    {% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
    {% set x_max = all_points | map(attribute=0) | max | default(center_x) %}
    {% set y_max = all_points | map(attribute=1) | max | default(center_y) %}
    {% set travel_speed = (printer.toolhead.max_velocity) * 30 | float %}
    
    {% set center_x = (x_min + x_max) / 2.0 | round(1) %}
    {% set center_y = (y_min + y_max) / 2.0 | round(1) %}
    
    SAVE_GCODE_STATE NAME=Pre_Center_State
    G90
    G0 X{center_x} Y{center_y} F{travel_speed}
    M400
    RESTORE_GCODE_STATE NAME=Pre_Center_State

[gcode_macro CLEAN_NOZZLE]
description: Clean nozzle using configurable temperature and wipe patterns
gcode:
    SAVE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE
    
    # Get cleaning temperature - use EXTRUDER param if available, otherwise default to 200
    {% set NOZZLE_TEMP = params.EXTRUDER|default(params.TEMP|default(150))|int %}
    {% set wipes = params.WIPES|default(5)|int %}
    
    # Homes the printer, sets absolute positioning, and updates the Stealthburner LEDs.
    #STATUS_HOMING
    # Check homing status and home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                             # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        G28 Z                           # Home Z if only Z is unhomed
    {% endif %}
    
    # Perform leveling only if needed (not already applied)
    {% if ('z_tilt' in printer and not printer.z_tilt.applied) or ('quad_gantry_level' in printer and not printer.quad_gantry_level.applied) %}
        # Use custom GANTRY_LEVELING macro if available, otherwise fallback to standard methods
        {% if printer.configfile.config['gcode_macro GANTRY_LEVELING'] is defined %}
            #STATUS_LEVELING                                        # Sets SB-LEDs to leveling-mode
            M117 Gantry Leveling...                                 # Display gantry leveling status
            GANTRY_LEVELING                                         # Performs the appropriate leveling method (QGL or Z_TILT)
        {% else %}
            # Fallback to traditional method if GANTRY_LEVELING doesn't exist
            {% if 'z_tilt' in printer and not printer.z_tilt.applied %}
                #STATUS_LEVELING                                  # Sets SB-LEDs to leveling-mode
                M117 Z-tilt...                                    # Display Z-tilt adjustment
                Z_TILT_ADJUST                                     # Levels the buildplate via z_tilt_adjust
            {% elif 'quad_gantry_level' in printer and not printer.quad_gantry_level.applied %}
                #STATUS_LEVELING                                  # Sets SB-LEDs to leveling-mode
                M117 QGL...                                       # Display QGL status
                QUAD_GANTRY_LEVEL                                 # Levels the gantry
            {% endif %}
        {% endif %}
    {% else %}
        M117 Leveling already applied - skipping
        {action_respond_info("Gantry leveling skipped - already applied")}
    {% endif %}
    
    # Conditional check to ensure Z is homed after leveling procedures
    # Keep this for macro independence - allows CLEAN_NOZZLE to be run standalone
    {% if 'z' not in printer.toolhead.homed_axes %}
        #STATUS_HOMING                                        # Sets SB-LEDs to homing-mode
        M117 Z homing                                         # Display Z homing status
        G28 Z                                                 # Home Z if needed after leveling
    {% endif %}
    
    # Now proceed with nozzle cleaning sequence
    G90                                        # Absolute positioning
    G1 X324 Y357 Z10 F7800                     # Move to cleaning position with safe Z height
    
    #STATUS_HEATING
    M117 Heating nozzle...
    {action_respond_info("Heating nozzle to %sÂ°C" % (NOZZLE_TEMP))}
    M109 S{NOZZLE_TEMP}                        # Heat and wait
    
    G91                                        # Relative positioning
    G90                                        # Back to absolute positioning
    M106 S127                                  # Fan at 50%
    
    #STATUS_CLEANING
    M117 Cleaning nozzle
    
    # Combined cleaning pattern
    G1 X324 Y357 F7800                         # Move to start position
    G1 Z0.2 F300                               # Lower to cleaning height (0.2mm)
    
    # Main cleaning sequence
    {% for wipe in range(wipes) %}              # Configurable wipe cycles
        # Straight wipes (now moving along X-axis)
        G1 X352 Y357 F7800                     # Forward wipe (right)
        G1 X324 Y357 F7800                     # Backward wipe (left)
        
        # Zigzag pattern
        G1 Y362 X332 F7800                     # Diagonal forward
        G1 Y360 X336 F7800                     # Middle point (changed from Y359.5)
        G1 Y357 X352 F7800                     # Diagonal back
        
        # Constant pressure cleaning
        G1 Y362 X324 F7800                     # Forward wipe
        G1 Y357 X332 F7800                     # Return wipe
    {% endfor %}
    
    # Final cleanup moves
    G1 Y363 X324 F7800                         # Move away from cleaning area
    M400                                       # Wait for moves to complete
    M117 Clean Complete
    M107                                       # Turn off fan
    
    # Return to safe position
    G91                                        # Relative positioning
    G1 Z10 F300                                # Raise nozzle
    G90                                        # Absolute positioning
    G28 Z                                      # Home Z
    
    #STATUS_READY
    # Only turn off heaters if we're not in a print
    {% if printer.idle_timeout.state == "Idle" %}
        TURN_OFF_HEATERS
        {action_respond_info("Cleaning complete - heaters turned off (idle state)")}
    {% else %}
        {action_respond_info("Cleaning complete - heaters maintained (printing state)")}
    {% endif %}
    
    RESTORE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE

    #M84                                      # Disable steppers # Using IDLE timeout timer in FLuidd/mainsail

[gcode_macro G29]
description: Performs Quad Gantry Leveling (if needed) and Bed Mesh Calibration
gcode:
    # Save current state
    SAVE_GCODE_STATE NAME=STATE_G29
    
    # Homes the printer, sets absolute positioning, and updates the Stealthburner LEDs.
    #STATUS_HOMING
    # Check homing status and home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                             # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        G28 Z                           # Home Z if only Z is unhomed
    {% endif %}
    
    # Check if GANTRY_LEVELING macro exists, use it if available
    {% if printer.configfile.config['gcode_macro GANTRY_LEVELING'] is defined %}
        #STATUS_LEVELING                                        # Sets SB-LEDs to leveling-mode
        M117 Gantry Leveling...                                 # Display gantry leveling status
        GANTRY_LEVELING                                         # Performs the appropriate leveling method (QGL or Z_TILT)
    {% else %}
        # Fallback to traditional method if GANTRY_LEVELING doesn't exist
        # Conditional method for Z_TILT_ADJUST and QUAD_GANTRY_LEVEL
        {% if 'z_tilt' in printer %}
            #STATUS_LEVELING                                  # Sets SB-LEDs to leveling-mode
            M117 Z-tilt...                                    # Display Z-tilt adjustment
            Z_TILT_ADJUST                                     # Levels the buildplate via z_tilt_adjust
        {% elif 'quad_gantry_level' in printer %}
            #STATUS_LEVELING                                  # Sets SB-LEDs to leveling-mode
            M117 QGL...                                       # Display QGL status
            QUAD_GANTRY_LEVEL                                 # Levels the gantry
        {% endif %}
    {% endif %}
    # Conditional check to ensure Z is homed after leveling procedures
    {% if 'z' not in printer.toolhead.homed_axes %}
        #STATUS_HOMING                                        # Sets SB-LEDs to homing-mode
        M117 Z homing                                         # Display Z homing status
        G28 Z                                                 # Home Z if needed after leveling
    {% endif %}
    
    # Now perform bed mesh calibration
    #STATUS_MESHING                     # If you have this status LED option
    BED_MESH_CALIBRATE ADAPTIVE=1 #Method=rapid_scan          #Uncomment for Eddy rapid bed scanning
    
    # Final Z home
    #STATUS_HOMING
    G28 Z
    
    # Restore state and indicate ready
    RESTORE_GCODE_STATE NAME=STATE_G29
    #STATUS_READY

[gcode_macro G34]
description: G34 - Quad Gantry Level with conditional homing. Homes if needed, performs QGL, then homes Z again.
gcode:
    # Homes the printer, sets absolute positioning, and updates the Stealthburner LEDs.
    #STATUS_HOMING
    # Check homing status and home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                             # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        G28 Z                           # Home Z if only Z is unhomed
    {% endif %}
    
    # Check if GANTRY_LEVELING macro exists, use it if available
    {% if printer.configfile.config['gcode_macro GANTRY_LEVELING'] is defined %}
        #STATUS_LEVELING                                        # Sets SB-LEDs to leveling-mode
        M117 Gantry Leveling...                                 # Display gantry leveling status
        GANTRY_LEVELING                                         # Performs the appropriate leveling method (QGL or Z_TILT)
    {% else %}
        # Fallback to traditional method if GANTRY_LEVELING doesn't exist
        # Conditional method for Z_TILT_ADJUST and QUAD_GANTRY_LEVEL
        {% if 'z_tilt' in printer %}
            #STATUS_LEVELING                                  # Sets SB-LEDs to leveling-mode
            M117 Z-tilt...                                    # Display Z-tilt adjustment
            Z_TILT_ADJUST                                     # Levels the buildplate via z_tilt_adjust
        {% elif 'quad_gantry_level' in printer %}
            #STATUS_LEVELING                                  # Sets SB-LEDs to leveling-mode
            M117 QGL...                                       # Display QGL status
            QUAD_GANTRY_LEVEL                                 # Levels the gantry
        {% endif %}
    {% endif %}
    # Conditional check to ensure Z is homed after leveling procedures
    {% if 'z' not in printer.toolhead.homed_axes %}
        #STATUS_HOMING                                        # Sets SB-LEDs to homing-mode
        M117 Z homing                                         # Display Z homing status
        G28 Z                                                 # Home Z if needed after leveling
    {% endif %}

[gcode_macro GANTRY_LEVELING]
 description: Enhanced Gantry Leveling with automatic detection of QGL or Z-Tilt
 gcode:
     SAVE_GCODE_STATE NAME=STATE_TRAM
    
     # Check homing status and home if needed
     {% if "xyz" not in printer.toolhead.homed_axes %}
         #STATUS_HOMING
         M117 Homing all axes first
         G28                             # Full home if not already homed
     {% elif 'z' not in printer.toolhead.homed_axes %}
         #STATUS_HOMING
         M117 Homing Z axis
         G28 Z                          # Home Z if only Z is unhomed
     {% endif %}
    
     # Check if QGL or Z_TILT is available
     {% if 'quad_gantry_level' in printer %}
         # Only proceed with QGL if it hasn't been applied
         {% if not printer.quad_gantry_level.applied %}
             #STATUS_LEVELING
             M117 Performing Quad Gantry Level
            
             # First pass - Coarse adjustment
             # Note: Replace 5 with preferred height (BTT Eddy=5, Mellow Fly/Cartographer=10)
             QUAD_GANTRY_LEVEL horizontal_move_z=5 #retry_tolerance=1                          # Eddy-NG installed? Uncomment retry tolerance=1
            
             # Second pass - Fine adjustment
             #QUAD_GANTRY_LEVEL horizontal_move_z=2                                            # Eddy-NG installed? Uncomment QUAD_GANTRY_LEVEL horizontal_move_z=2  
            
             # Home Z after leveling
             # #STATUS_HOMING
             M117 Re-homing Z after QGL
             G28 Z
         {% else %}
             M117 QGL already applied
         {% endif %}
    
     {% elif 'z_tilt' in printer %}
         M117 Performing Z-Tilt Adjustment
        
         # First pass with retry tolerance
         Z_TILT_ADJUST horizontal_move_z=5 #RETRY_TOLERANCE=1                                # Eddy-NG installed? Uncomment RETRY_TOLERANCE=1  
        
         # Second pass for fine adjustment
         #Z_TILT_ADJUST horizontal_move_z=2                                                  # Eddy-NG installed? Uncomment Z_TILT_ADJUST horizontal_move_z=2  
        
         # Home Z after leveling
         #STATUS_HOMING
         M117 Re-homing Z after Z-Tilt
         G28 Z
    
     {% else %}
         M117 No QGL or Z-Tilt available - Use SCREWS_TILT_CALCULATE
         RESPOND TYPE=error MSG="Neither Quad Gantry Level nor Z-Tilt configurations found"
         RESPOND TYPE=command MSG="Try running: SCREWS_TILT_CALCULATE"
     {% endif %}
    
     M117 Gantry Calibration Complete
     RESTORE_GCODE_STATE NAME=STATE_TRAM

     #STATUS_READY

[gcode_macro LOAD_FILAMENT]
gcode:
    # Parameters with defaults
    {% set speed = params.SPEED|default(300) %}
    {% set load_distance = params.LOAD_DISTANCE|default(45)|int %}
    {% set purge_distance = params.PURGE_DISTANCE|default(30)|int %}
    {% set extruder_temp = params.EXTRUDER_TEMP|default(200)|int %}
    
    # Current state variables
    {% set current_target_temp = printer.extruder.target|int %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity * 60 %}

    {% if printer.print_stats.state != "printing" %}
        # Temperature management logic
        {% if printer.print_stats.state != "paused" %}
            M104 S{extruder_temp}
            M117 Nozzle heating...
            {action_respond_info("Nozzle not hot enough!")}
            {action_respond_info("Nozzle heating...")}
            M109 S{extruder_temp}
        {% else %}
            {% if printer.extruder.target == 0 %}
                M104 S{extruder_temp}
                M117 Nozzle heating...
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{extruder_temp}
            {% else %}
                M104 S{printer.extruder.target}
                M117 Nozzle heating...
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{printer.extruder.target}
            {% endif %}
        {% endif %}
        
        # Filament loading sequence
        M117 Loading filament...
        SAVE_GCODE_STATE NAME=load_state
        G91 
        G92 E0
        G1 E{load_distance} F{max_velocity}   # Fast-load
        G1 E{purge_distance} F{speed}         # Purge at controlled speed
        G90
        M400
        RESTORE_GCODE_STATE NAME=load_state
        M117 Load complete
        M400
        
        # Temperature cleanup
        {% if current_target_temp == 0 or printer.print_stats.state != "paused" %}
            M104 S0
        {% endif %}
    {% else %}
        {action_respond_info("Don't load filament during printing!!!")}
    {% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode:
    # Parameters with defaults
    {% set speed = params.SPEED|default(300) %}
    {% set unload_distance = params.UNLOAD_DISTANCE|default(50)|int %}
    {% set purge_distance = params.PURGE_DISTANCE|default(25)|int %}
    {% set extruder_temp = params.EXTRUDER_TEMP|default(200)|int %}
    
    # Current state variables
    {% set current_target_temp = printer.extruder.target|int %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity * 60 %}

    {% if printer.print_stats.state != "printing" %}
        # Temperature management logic
        {% if printer.print_stats.state != "paused" %}
            M104 S{extruder_temp}
            M117 Nozzle heating...
            {action_respond_info("Nozzle not hot enough!")}
            {action_respond_info("Nozzle heating...")}
            M109 S{extruder_temp}
        {% else %}
            {% if printer.extruder.target == 0 %}
                M104 S{extruder_temp}
                M117 Nozzle heating...
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{extruder_temp}
            {% else %}
                M104 S{printer.extruder.target}
                M117 Nozzle heating...
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{printer.extruder.target}
            {% endif %}
        {% endif %}
        
        # Filament unloading sequence
        M117 Unloading filament...
        SAVE_GCODE_STATE NAME=unload_state
        G91
        G92 E0
        G1 E{purge_distance} F{speed}         # Purge first
        G1 E-10 F1500                         # Quick retract
        G1 E-20 F600                          # Slower retract
        M400
        G4 P3000                              # Pause for cooling
        G1 E-{unload_distance} F{max_velocity} # Fast unload
        G90
        M400
        RESTORE_GCODE_STATE NAME=unload_state
        M117 Unload complete
        M400
        
        # Temperature cleanup
        {% if current_target_temp == 0 or printer.print_stats.state != "paused" %}
            M104 S0
        {% endif %}
    {% else %}
        {action_respond_info("Don't unload filament during printing!!!")}
    {% endif %}

[gcode_macro M600]
gcode:
    PAUSE                              # Make sure you have FLUIDD or Mainsail Client Variables setup for your pausing

[gcode_macro LIGHT]
variable_state: 1                       # Set initial state to 1 since light starts on
description: Toggles main LED on/off
gcode:
    {% if printer["gcode_macro LIGHT"].state %}
        SET_PIN PIN=main_led VALUE=0
        SET_GCODE_VARIABLE MACRO=LIGHT VARIABLE=state VALUE=0
    {% else %}
        SET_PIN PIN=main_led VALUE=1
        SET_GCODE_VARIABLE MACRO=LIGHT VARIABLE=state VALUE=1
    {% endif %}

[gcode_macro PROBE_CALIBRATE]
description: Calibrates Z-offset with QGL (if needed), heated nozzle and bed
rename_existing: PROBE_CALIBRATE_BASE
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|int %}
    
    SAVE_GCODE_STATE NAME=STATE_PROBE_CALIBRATE
    
    # Homes the printer, sets absolute positioning, and updates the Stealthburner LEDs.
    #STATUS_HOMING
    # Check homing status and home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                             # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        G28 Z                           # Home Z if only Z is unhomed
    {% endif %}
    
    # Inform user calibration starting
    {action_respond_info("Starting preparation for Z-offset calibration")}
    {action_respond_info("Heating hotend to 150C and bed to %d" % (BED_TEMP))}
    
    # Start heating process
    M104 S150                          # Set hotend to 150C
    M140 S{BED_TEMP}                   # Set bed temperature
    
    # Check if GANTRY_LEVELING macro exists, use it if available
    {% if printer.configfile.config['gcode_macro GANTRY_LEVELING'] is defined %}
        #STATUS_LEVELING                                        # Sets SB-LEDs to leveling-mode
        M117 Gantry Leveling...                                 # Display gantry leveling status
        GANTRY_LEVELING                                         # Performs the appropriate leveling method (QGL or Z_TILT)
    {% else %}
        # Fallback to traditional method if GANTRY_LEVELING doesn't exist
        # Conditional method for Z_TILT_ADJUST and QUAD_GANTRY_LEVEL
        {% if 'z_tilt' in printer %}
            #STATUS_LEVELING                                  # Sets SB-LEDs to leveling-mode
            M117 Z-tilt...                                    # Display Z-tilt adjustment
            Z_TILT_ADJUST                                     # Levels the buildplate via z_tilt_adjust
        {% elif 'quad_gantry_level' in printer %}
            #STATUS_LEVELING                                  # Sets SB-LEDs to leveling-mode
            M117 QGL...                                       # Display QGL status
            QUAD_GANTRY_LEVEL                                 # Levels the gantry
        {% endif %}
    {% endif %}
    # Conditional check to ensure Z is homed after leveling procedures
    {% if 'z' not in printer.toolhead.homed_axes %}
        #STATUS_HOMING                                        # Sets SB-LEDs to homing-mode
        M117 Z homing                                         # Display Z homing status
        G28 Z                                                 # Home Z if needed after leveling
    {% endif %}
    
    # Wait for temperatures after QGL
    M190 S{BED_TEMP}                   # Wait for bed temp
    M109 S150                          # Wait for hotend temp
    
    # Begin calibration
    PROBE_CALIBRATE_BASE               # Start calibration
    TESTZ Z=-4                         # Move to initial Z position
    
    RESTORE_GCODE_STATE NAME=STATE_PROBE_CALIBRATE
    #STATUS_READY

[gcode_macro VERIFY_ACCELEROMETERS]
description: Check if accelerometers are responding and display current values
variable_accel_status: False
gcode:
    # Reset status variable
    SET_GCODE_VARIABLE MACRO=VERIFY_ACCELEROMETERS VARIABLE=accel_status VALUE=False
    
    # Add a small delay to ensure accelerometers are ready after homing/leveling
    G4 P1000  # Wait 1 second
    
    # Initialize success tracking
    {% set ns = namespace(success = false, tested_count = 0) %}
    
    M118 Starting accelerometer verification...
    
    # Check for standard accelerometer config (adxl345 without chip name)
    {% if 'adxl345' in printer.configfile.config %}
        {% set ns.tested_count = ns.tested_count + 1 %}
        M118 Testing primary accelerometer (adxl345)...
        
        # Use a more robust error handling approach
        {% set query_result = "" %}
        {% if printer.configfile.config.adxl345 %}
            # Try the query in a way that won't crash the macro
            M118 Querying primary accelerometer...
            ACCELEROMETER_QUERY
            M118 Primary accelerometer responded successfully
            {% set ns.success = true %}
        {% endif %}
    {% endif %}
    
    # Check for named accelerometer configs (e.g., adxl345 hotend, adxl345 bed)
    {% for section_name in printer.configfile.config %}
        {% if section_name.startswith('adxl345 ') and section_name != 'adxl345' %}
            {% set chip_name = section_name.split(' ', 1)[1] %}
            {% set ns.tested_count = ns.tested_count + 1 %}
            M118 Testing {chip_name} accelerometer...
            
            # Query the named chip
            ACCELEROMETER_QUERY CHIP={chip_name}
            M118 {chip_name} accelerometer responded successfully
            {% set ns.success = true %}
        {% endif %}
    {% endfor %}
    
    # Final status check
    {% if ns.success and ns.tested_count > 0 %}
        SET_GCODE_VARIABLE MACRO=VERIFY_ACCELEROMETERS VARIABLE=accel_status VALUE=True
        M118 Accelerometer verification PASSED! ({ns.tested_count} accelerometer(s) tested)
        RESPOND MSG="All accelerometers are responding correctly."
    {% elif ns.tested_count == 0 %}
        M118 No accelerometer configurations found in printer.cfg
        RESPOND TYPE=error MSG="No ADXL345 accelerometers configured in printer.cfg"
    {% else %}
        M118 Accelerometer verification FAILED!
        RESPOND TYPE=error MSG="One or more accelerometers failed to respond"
    {% endif %}

[gcode_shell_command process_shaper_results]
command: sh -c '~/klipper/scripts/calibrate_shaper.py /tmp/resonances_x_*.csv -o /tmp/shaper_calibrate_x.png && ~/klipper/scripts/calibrate_shaper.py /tmp/resonances_y_*.csv -o /tmp/shaper_calibrate_y.png && echo "X-axis recommendations:" && ~/klipper/scripts/calibrate_shaper.py /tmp/resonances_x_*.csv && echo "Y-axis recommendations:" && ~/klipper/scripts/calibrate_shaper.py /tmp/resonances_y_*.csv'
timeout: 60.0

[gcode_macro INPUT_SHAPER]
description: Input Shaper resonance testing with conditional accelerometer verification and result processing
gcode:
    #STATUS_HOMING                         # STATUS: Display homing status
    
    # Conditional homing sequence (for all cases)
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                                # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        G28 Z                              # Home Z if only Z is unhomed
    {% endif %}
    
    # Gantry leveling after homing (for all cases)
    {% if printer.configfile.config['gcode_macro GANTRY_LEVELING'] is defined %}
        #STATUS_LEVELING                   # Sets SB-LEDs to leveling-mode
        M117 Gantry Leveling...            # Display gantry leveling status
        GANTRY_LEVELING                    # Performs the appropriate leveling method (QGL or Z_TILT)
    {% else %}
        # Fallback to traditional method if GANTRY_LEVELING doesn't exist
        {% if 'z_tilt' in printer %}
            #STATUS_LEVELING               # Sets SB-LEDs to leveling-mode
            M117 Z-tilt...                 # Display Z-tilt adjustment
            Z_TILT_ADJUST                  # Levels the buildplate via z_tilt_adjust
        {% elif 'quad_gantry_level' in printer %}
            #STATUS_LEVELING               # Sets SB-LEDs to leveling-mode
            M117 QGL...                    # Display QGL status
            QUAD_GANTRY_LEVEL              # Levels the gantry
        {% endif %}
    {% endif %}
    
    # Now check if ADXL345 is configured in Klipper
    {% if 'adxl345' in printer.configfile.config %}
        # ADXL is configured, proceed with verification
        M117 Checking accelerometers
        VERIFY_ACCELEROMETERS
        
        # Check if accelerometers passed verification
        {% if printer["gcode_macro VERIFY_ACCELEROMETERS"].accel_status %}
            # Accelerometers are good, proceed with testing
            #STATUS_CALIBRATING_Z          # STATUS: Show calibration in progress
            M117 Accelerometers OK, proceeding
            
            # Perform resonance testing for each axis
            #STATUS_LEVELING               # STATUS: Show leveling status during testing
            M117 Testing X-axis resonances
            TEST_RESONANCES AXIS=X
            M117 Testing Y-axis resonances
            TEST_RESONANCES AXIS=Y
            
            # Process results via SSH and display recommendations
            #STATUS_BUSY                   # STATUS: Show busy status during processing
            M117 Processing results...
            RESPOND MSG="Processing input shaper data and generating recommendations..."
            RUN_SHELL_COMMAND CMD=process_shaper_results
            
            # Provide information about result locations
            M118 Raw results saved to /tmp/resonances_x_*.csv and /tmp/resonances_y_*.csv
            M118 Graphs saved to /tmp/shaper_calibrate_x.png and /tmp/shaper_calibrate_y.png
            
            #STATUS_READY                  # STATUS: Return to ready state
            M117 Resonance testing complete
        {% else %}
            # Accelerometer check failed
            #STATUS_BUSY                   # STATUS: Using same status as beginning
            M117 Accelerometer check failed!
            M118 Resonance testing aborted: accelerometer error
            RESPOND TYPE=error MSG="Accelerometer check failed. Testing aborted."
            RESPOND MSG="Check connections to ADXL345 sensors."
        {% endif %}
    {% else %}
        # No ADXL configured, cannot proceed with input shaper testing
        M117 No ADXL configured, cannot proceed
        M118 Input shaper testing requires ADXL345 accelerometer
        RESPOND TYPE=error MSG="No ADXL345 accelerometer configured. Testing aborted."
        RESPOND MSG="Input shaper testing requires accelerometer sensors."
    {% endif %}

    #STATUS_READY

[gcode_macro SHAPER_CALIBRATE]
rename_existing: BASE_SHAPER_CALIBRATE
description: Input Shaper auto-calibration with conditional accelerometer verification
gcode:
    #STATUS_HOMING                         # STATUS: Display homing status
    
    # Conditional homing sequence (for all cases)
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                                # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        G28 Z                              # Home Z if only Z is unhomed
    {% endif %}
    
    # Gantry leveling after homing (for all cases)
    {% if printer.configfile.config['gcode_macro GANTRY_LEVELING'] is defined %}
        #STATUS_LEVELING                   # Sets SB-LEDs to leveling-mode
        M117 Gantry Leveling...            # Display gantry leveling status
        GANTRY_LEVELING                    # Performs the appropriate leveling method (QGL or Z_TILT)
    {% else %}
        # Fallback to traditional method if GANTRY_LEVELING doesn't exist
        {% if 'z_tilt' in printer %}
            #STATUS_LEVELING               # Sets SB-LEDs to leveling-mode
            M117 Z-tilt...                 # Display Z-tilt adjustment
            Z_TILT_ADJUST                  # Levels the buildplate via z_tilt_adjust
        {% elif 'quad_gantry_level' in printer %}
            #STATUS_LEVELING               # Sets SB-LEDs to leveling-mode
            M117 QGL...                    # Display QGL status
            QUAD_GANTRY_LEVEL              # Levels the gantry
        {% endif %}
    {% endif %}
    
    # Now check if ADXL345 is configured in Klipper
    {% if 'adxl345' in printer.configfile.config %}
        # ADXL is configured, proceed with verification
        M117 Checking accelerometers
        VERIFY_ACCELEROMETERS
        
        # Check if accelerometers passed verification
        {% if printer["gcode_macro VERIFY_ACCELEROMETERS"].accel_status %}
            # Accelerometers are good, proceed with calibration
            #STATUS_CALIBRATING_Z          # STATUS: Show calibration in progress
            M117 Accelerometers OK, proceeding
            
            # Run shaper calibration
            #STATUS_LEVELING               # STATUS: Show leveling status during calibration
            M117 Running X-axis calibration
            BASE_SHAPER_CALIBRATE AXIS=x
            M117 Running Y-axis calibration
            BASE_SHAPER_CALIBRATE AXIS=y
            
            #STATUS_READY                  # STATUS: Return to ready state
            M117 Calibration complete
        {% else %}
            # Accelerometer check failed
            #STATUS_BUSY                   # STATUS: Using same status as beginning
            M117 Accelerometer check failed!
            M118 Calibration aborted: accelerometer error
            RESPOND TYPE=error MSG="Accelerometer check failed. Calibration aborted."
            RESPOND MSG="Check connections to ADXL345 sensors."
        {% endif %}
    {% else %}
        # No ADXL configured, proceed without verification
        M117 No ADXL configured, proceeding
        RESPOND MSG="No ADXL345 accelerometer configured, proceeding with standard calibration"
        
        # Run standard shaper calibration
        M117 Running X-axis calibration
        BASE_SHAPER_CALIBRATE AXIS=x
        M117 Running Y-axis calibration
        BASE_SHAPER_CALIBRATE AXIS=y
        
        #STATUS_READY                      # STATUS: Return to ready state
        M117 Calibration complete
    {% endif %}

    #STATUS_READY

[gcode_macro UNSAFE_Z_MOVEMENT]
description: Move the toolhead in Z without homing. REQUIRES force_move CONFIG! Use positive or negative values.
gcode:
    {% set z_movement = params.Z|default(5)|float %}    # Default 5mm if not specified
    
    # Extra warning for downward movement
    {% if z_movement < 0 %}
        { action_respond_info("!!! WARNING: PERFORMING UNSAFE DOWNWARD MOVEMENT !!!") }
        { action_respond_info("!!! ENSURE ADEQUATE CLEARANCE BELOW NOZZLE !!!") }
    {% endif %}
    
    # General warning message
    { action_respond_info("WARNING: Performing unsafe tool movement without homing!") }
    { action_respond_info("Moving Z by %smm (%s)" % (z_movement, "DOWN" if z_movement < 0 else "UP")) }
    
    # Save current state
    SAVE_GCODE_STATE NAME=UNSAFE_MOVE
    
    # Perform unsafe move - this will fail if force_move is not available
    G90                                    # Absolute positioning
    SET_KINEMATIC_POSITION Z=0            # Force Z position to 0
    G0 Z{z_movement} F300                 # Move Z at slower 5mm/s for safety
    #M84                                   # Disable steppers - Commented out to allow multiple movements
    
    # Restore saved state
    RESTORE_GCODE_STATE NAME=UNSAFE_MOVE

[gcode_macro GET_WIFI_IP]
gcode:
    M117 Getting WiFi IP...
    RUN_SHELL_COMMAND CMD=get_wifi_ip
    G4 P1000  ; Wait 1 second for command to complete
    {% if printer.system_stats.last_shell_command_output %}
        {% set wifi_ip = printer.system_stats.last_shell_command_output.strip() %}
        M117 WiFi: {wifi_ip}
        {action_respond_info("WiFi IP: " + wifi_ip)}
    {% else %}
        M117 WiFi: Error getting IP
        {action_respond_info("WiFi: Error getting IP")}
    {% endif %}

[gcode_macro GET_ETHERNET_IP]
gcode:
    M117 Getting Ethernet IP...
    RUN_SHELL_COMMAND CMD=get_ethernet_ip
    G4 P1000  ; Wait 1 second for command to complete
    {% if printer.system_stats.last_shell_command_output %}
        {% set eth_ip = printer.system_stats.last_shell_command_output.strip() %}
        M117 Ethernet: {eth_ip}
        {action_respond_info("Ethernet IP: " + eth_ip)}
    {% else %}
        M117 Ethernet: Error getting IP
        {action_respond_info("Ethernet: Error getting IP")}
    {% endif %}

[gcode_macro GET_ALL_IPS]
gcode:
    GET_WIFI_IP
    G4 P3000  ; Wait 3 seconds
    GET_ETHERNET_IP
    G4 P3000  ; Wait 3 seconds
    M117 IP Info Complete

[gcode_macro SMART_PARK]
description: Parks your printhead near the print area for pre-print hotend heating.
gcode:

    {% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}                                                                 # Pull all variables from _KAMP_Settings
    {% set z_height = kamp_settings.smart_park_height | float %}                                                                    # Set Z height variable
    {% set purge_margin = kamp_settings.purge_margin | float %}                                                                     # Set purge margin variable
    {% set verbose_enable = kamp_settings.verbose_enable | abs %}                                                                   # Set verbosity
    {% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}                                                                # Create center point of x for fallback
    {% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}                                                                # Create center point of y for fallback
    {% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
    {% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}                                # Gather all object points
    {% set x_min = all_points | map(attribute=0) | min | default(center_x) %}                                                       # Set x_min from smallest object x point
    {% set y_min = all_points | map(attribute=1) | min | default(center_y) %}                                                       # Set y_min from smallest object y point
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}                                                           # Set travel speed from config

    {% if purge_margin > 0 and x_min != center_x and y_min != center_y %}                                                           # If objects are detected and purge margin 
        {% set x_min = [ x_min - purge_margin , x_min ] | min %}                                                                    # value is greater than 0, move
        {% set y_min = [ y_min - purge_margin , y_min ] | min %}                                                                    # to purge location + margin
        {% set x_min = [ x_min , axis_minimum_x ] | max %}
        {% set y_min = [ y_min , axis_minimum_y ] | max %}
    {% endif %}

                                                                                                                                    # Verbose park location
    {% if verbose_enable == True %}

    { action_respond_info("Smart Park location: {},{}.".format(
        (x_min),
        (y_min),
    )) }

    {% endif %}
    
    SAVE_GCODE_STATE NAME=Presmartpark_State                                                                                        # Create gcode state

    G90                                                                                                                             # Absolute positioning
    {% if printer.toolhead.position.z < z_height %}
        G0 Z{z_height}                                                                                                              # Move Z to park height if current Z position is lower than z_height
    {% endif %}
    G0 X{x_min} Y{y_min} F{travel_speed}                                                                                            # Move near object area
    G0 Z{z_height}                                                                                                                  # Move Z to park height 

    RESTORE_GCODE_STATE NAME=Presmartpark_State                                                                                     # Restore gcode state

[gcode_macro LINE_PURGE]
description: A purge macro that adapts to be near your actual printed objects
gcode:
    # Get relevant printer params
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
    {% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
    
    # Use firmware retraction if it is defined
    {% if printer.firmware_retraction is defined %}
        {% set RETRACT = G10 | string %}
        {% set UNRETRACT = G11 | string %}
    {% else %}
        {% set RETRACT = 'G1 E-.5 F2100' | string %}
        {% set UNRETRACT = 'G1 E.5 F2100' | string %}
    {% endif %}

    # Get purge settings from _Kamp_Settings
    {% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
    {% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
    {% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
    {% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
    {% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
    {% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}


    # Calculate purge origins and centers from objects
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}    # Get all object points
    {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}                          # Object x min
    {% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}                          # Object x max
    {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}                          # Object y min
    {% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}                          # Object y max

    {% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}      # Create center point of purge line relative to print on X axis
    {% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}      # Create center point of purge line relative to print on Y axis

    {% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}                                  # Add margin to x min, compare to 0, and choose the larger
    {% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}                                  # Add margin to y min, compare to 0, and choose the larger

    # Calculate purge speed
    {% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}

    {% if cross_section < 5 %}

        {action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}

    {% else %}

        {% if verbose_enable == True %}

        {action_respond_info("Moving filament tip {}mms".format(                                                                 
            (tip_distance),                                                                                      
        )) }
        {% endif %}

        {% if printer.firmware_retraction is defined %}
            {action_respond_info("KAMP purge is using firmware retraction.")}
        {% else %}
            {action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
        {% endif %}

        {% if purge_y_origin > 0 %}
        
            {action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(                                                                 
                (purge_x_center),
                (purge_y_origin),
                (purge_amount),
                (flow_rate),
            )) }
    
        {% else %}
    
            {action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(                                                                 
                (purge_x_origin),
                (purge_y_center),
                (purge_amount),
                (flow_rate),
            )) }

        {% endif %}

        SAVE_GCODE_STATE NAME=Prepurge_State                                                    # Create gcode state

        {% if purge_y_origin > 0 %}                                                             # If there's room on Y, purge along X axis in front of print area

            G92 E0                                                                              # Reset extruder
            G0 F{travel_speed}                                                                  # Set travel speed
            G90                                                                                 # Absolute positioning
            G0 X{purge_x_center} Y{purge_y_origin}                                              # Move to purge position
            G0 Z{purge_height}                                                                  # Move to purge Z height
            M83                                                                                 # Relative extrusion mode
            G1 E{tip_distance} F{purge_move_speed}                                              # Move filament tip
            G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}             # Purge line
            {RETRACT}                                                                           # Retract
            G0 X{purge_x_center + purge_amount + 10} F{travel_speed}                            # Rapid move to break string
            G92 E0                                                                              # Reset extruder distance
            M82                                                                                 # Absolute extrusion mode
            G0 Z{purge_height * 2} F{travel_speed}                                              # Z hop

        {% else %}                                                                              # If there's room on X, purge along Y axis to the left of print area
            
            G92 E0                                                                              # Reset extruder
            G0 F{travel_speed}                                                                  # Set travel speed
            G90                                                                                 # Absolute positioning
            G0 X{purge_x_origin} Y{purge_y_center}                                              # Move to purge position
            G0 Z{purge_height}                                                                  # Move to purge Z height
            M83                                                                                 # Relative extrusion mode
            G1 E{tip_distance} F{purge_move_speed}                                              # Move filament tip
            G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}             # Purge line
            {RETRACT}                                                                           # Retract
            G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}                            # Rapid move to break string
            G92 E0                                                                              # Reset extruder distance
            M82                                                                                 # Absolute extrusion mode
            G0 Z{purge_height * 2} F{travel_speed}                                              # Z hop

        {% endif %}

        RESTORE_GCODE_STATE NAME=Prepurge_State                                                 # Restore gcode state
    
    {% endif %}

[gcode_macro _KAMP_Settings]
description: This macro contains all adjustable settings for KAMP 

# The following variables are settings for KAMP as a whole.
variable_verbose_enable: True               # Set to True to enable KAMP information output when running. This is useful for debugging.

# The following variables are for adjusting adaptive mesh settings for KAMP.
variable_mesh_margin: 0                     # Expands the mesh size in millimeters if desired. Leave at 0 to disable.
variable_fuzz_amount: 0                     # Slightly randomizes mesh points to spread out wear from nozzle-based probes. Leave at 0 to disable.

# The following variables are for those with a dockable probe like Klicky, Euclid, etc.                 # ----------------  Attach Macro | Detach Macro
variable_probe_dock_enable: False           # Set to True to enable the usage of a dockable probe.      # ---------------------------------------------
variable_attach_macro: 'Attach_Probe'       # The macro that is used to attach the probe.               # Klicky Probe:   'Attach_Probe' | 'Dock_Probe'
variable_detach_macro: 'Dock_Probe'         # The macro that is used to store the probe.                # Euclid Probe:   'Deploy_Probe' | 'Stow_Probe'
                                                                                                        # Legacy Gcode:   'M401'         | 'M402'

# The following variables are for adjusting adaptive purge settings for KAMP.
variable_purge_height: 0.8                  # Z position of nozzle during purge, default is 0.8.
variable_tip_distance: 4                    # Distance between tip of filament and nozzle before purge. Should be similar to PRINT_END final retract amount.
variable_purge_margin: 35                   # Distance the purge will be in front of the print area, default is 10.
variable_purge_amount: 30                   # Amount of filament to be purged prior to printing.
variable_flow_rate: 12                      # Flow rate of purge in mm3/s. Default is 12.

# The following variables are for adjusting the Smart Park feature for KAMP, which will park the printhead near the print area at a specified height.
variable_smart_park_height: 1              # Z position for Smart Park, default is 10.

gcode: # Gcode section left intentionally blank. Do not disturb.

    {action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}
