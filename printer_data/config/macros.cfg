[gcode_macro BEEP]
gcode:
  SET_PIN PIN=beeper VALUE=1
  G4 P10  
  SET_PIN PIN=beeper VALUE=0

[gcode_macro mainled_on]
gcode:
    SET_PIN PIN=main_led VALUE=1

[gcode_macro mainled_off]
gcode:
    SET_PIN PIN=main_led VALUE=0

[gcode_macro _ALL_FAN_OFF]
gcode:
    M106 S0
    M107

[gcode_macro G34]
description: G34 - Quad Gantry Level with conditional homing. Homes if needed, performs QGL, then homes Z again.
gcode:
    # Check if printer is homed
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        # If not fully homed, check if X and Y are homed
        {% if not ('x' in printer.toolhead.homed_axes and 'y' in printer.toolhead.homed_axes) %}
            # If X or Y not homed, do full homing
            G28
        {% else %}
            # If only X and Y are homed, just home Z
            G28 Z
        {% endif %}
    {% endif %}
    
    # Perform quad gantry leveling
    QUAD_GANTRY_LEVEL
    
    # Home Z again after QGL
    G28 Z

[gcode_macro CENTER]
description: Move the toolhead to the center of objects to be printed, or center of build plate
gcode:
    {% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
    {% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
    {% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
    {% set x_max = all_points | map(attribute=0) | max | default(center_x) %}
    {% set y_max = all_points | map(attribute=1) | max | default(center_y) %}
    {% set travel_speed = (printer.toolhead.max_velocity) * 30 | float %}

    {% set center_x = (x_min + x_max) / 2.0 | round(1) %}
    {% set center_y = (y_min + y_max) / 2.0 | round(1) %}

    SAVE_GCODE_STATE NAME=Pre_Center_State
    G90
    G0 X{center_x} Y{center_y} F{travel_speed}
    M400
    RESTORE_GCODE_STATE NAME=Pre_Center_State


[gcode_macro G29]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            G28 ; home if not already homed
            {% else %}
              G28 Z
        {% endif %}
        STATUS_LEVELING
        QUAD_GANTRY_LEVEL
        STATUS_HOMING       # Homes Z again after QGL
        G28 Z
    {% endif %}
  BED_MESH_CALIBRATE ADAPTIVE=1 #Method=rapid_scan # Remove the comment for Eddy use
  G28 Z

[gcode_macro M600]
gcode:
    PAUSE                        # Make sure you have FLUIDD or Mainsail Client Variables setup for your pausing

[gcode_macro CLEAN_NOZZLE] #This is part of the "A better start_print macro SV08 Edition: https://github.com/ss1gohan13/A-better-print_start-macro-SV08
description: Clean nozzle using configurable temperature and wipe patterns
gcode:
    SAVE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE
    
    # Get cleaning temperature - use EXTRUDER param if available, otherwise default to 200
    {% set NOZZLE_TEMP = params.EXTRUDER|default(params.TEMP|default(200))|int %}
    {% set wipes = params.WIPES|default(5)|int %}
    
    # Check if printer needs homing
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28                                     # Full home if not fully homed
    {% endif %}

    # Perform Z tilt adjust or QGL depending on printer configuration
    {% if ('z_tilt' in printer and not printer.z_tilt.applied) or ('quad_gantry_level' in printer and not printer.quad_gantry_level.applied) %}
        STATUS_LEVELING
        {% if 'z_tilt' in printer and not printer.z_tilt.applied %}
            {action_respond_info("Performing Z-tilt adjustment...")}
            Z_TILT_ADJUST
        {% endif %}
        
        {% if 'quad_gantry_level' in printer and not printer.quad_gantry_level.applied %}
            {action_respond_info("Performing Quad Gantry Level...")}
            QUAD_GANTRY_LEVEL
        {% endif %}
        
        # Only home Z if we actually performed a leveling operation
        STATUS_HOMING
        G28 Z                                  # Home Z again after leveling
    {% endif %}
    
    # Now proceed with nozzle cleaning sequence
    G90                                        # Absolute positioning
    G1 X324 Y357 Z10 F7800                     # Move to cleaning position with safe Z height
    
    STATUS_HEATING
    M117 Heating nozzle...
    {action_respond_info("Heating nozzle to %sÂ°C" % (NOZZLE_TEMP))}
    M109 S{NOZZLE_TEMP}                        # Heat and wait
    
    G91                                        # Relative positioning
    G90                                        # Back to absolute positioning
    M106 S127                                  # Fan at 50%
    
    STATUS_CLEANING
    M117 Cleaning nozzle
    
    # Combined cleaning pattern
    G1 X324 Y357 F7800                        # Move to start position
    G1 Z0.2 F300                              # Lower to cleaning height (0.2mm)
    
    # Main cleaning sequence
    {% for wipe in range(wipes) %}            # Configurable wipe cycles
        # Straight wipes (now moving along X-axis)
        G1 X352 Y357 F7800                    # Forward wipe (right) - adjusted from 340 to 352
        G1 X324 Y357 F7800                    # Backward wipe (left)
        
        # Zigzag pattern
        G1 Y362 X332 F7800                    # Diagonal forward - adjusted from 360 to 362
        G1 Y359.5 X336 F7800                  # Middle point - adjusted from 358.5
        G1 Y357 X352 F7800                    # Diagonal back - adjusted from 340 to 352
        
        # Constant pressure cleaning
        G1 Y362 X324 F7800                    # Forward wipe - adjusted from 360 to 362
        G1 Y357 X332 F7800                    # Return wipe
    {% endfor %}
    
    # Final cleanup moves
    G1 Y363 X324 F7800                        # Move away from cleaning area - adjusted from 365 to 363
    M400                                      # Wait for moves to complete
    M117 Clean Complete
    M107                                      # Turn off fan
    
    # Return to safe position
    G91                                       # Relative positioning
    G1 Z10 F300                               # Raise nozzle
    G90                                       # Absolute positioning
    G28 Z                                     # Home Z
    
    STATUS_READY
    # Only turn off heaters if we're not in a print
    {% if printer.idle_timeout.state == "Idle" %}
        TURN_OFF_HEATERS
        {action_respond_info("Cleaning complete - heaters turned off (idle state)")}
    {% else %}
        {action_respond_info("Cleaning complete - heaters maintained (printing state)")}
    {% endif %}
    
    RESTORE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE
    
    #M84                                      # Disable steppers

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro UNSAFE_Z_MOVEMENT]
description: Move the toolhead in Z without homing. REQUIRES force_move CONFIG! Use positive or negative values.
gcode:
    {% set z_movement = params.Z|default(5)|float %}    # Default 5mm if not specified
    
    {% if not 'force_move' in printer %}
        { action_raise_error("This macro requires [force_move] to be enabled in printer.cfg") }
    {% else %}
        # Extra warning for downward movement
        {% if z_movement < 0 %}
            { action_respond_info("!!! WARNING: PERFORMING UNSAFE DOWNWARD MOVEMENT !!!") }
            { action_respond_info("!!! ENSURE ADEQUATE CLEARANCE BELOW NOZZLE !!!") }
        {% endif %}
        
        # General warning message
        { action_respond_info("WARNING: Performing unsafe tool movement without homing!") }
        { action_respond_info("Moving Z by %smm (%s)" % (z_movement, "DOWN" if z_movement < 0 else "UP")) }
        
        # Save current state
        SAVE_GCODE_STATE NAME=UNSAFE_MOVE
        
        # Perform unsafe move
        G90                                    # Absolute positioning
        SET_KINEMATIC_POSITION Z=0            # Force Z position to 0
        G0 Z{z_movement} F300                 # Move Z at slower 5mm/s for safety
        #M84                                   # Disable steppers - Commented out to allow multiple movements
        
        # Restore saved state
        RESTORE_GCODE_STATE NAME=UNSAFE_MOVE
    {% endif %}

[gcode_macro PROBE_CALIBRATE]
description: Calibrates Z-offset with QGL (if needed), heated nozzle and bed
rename_existing: PROBE_CALIBRATE_BASE
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|int %}
    
    SAVE_GCODE_STATE NAME=STATE_PROBE_CALIBRATE
    
    # Check homing status and home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        STATUS_HOMING
        G28                             # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        STATUS_HOMING
        G28 Z                          # Home Z if only Z is unhomed
    {% endif %}
    
    # Inform user calibration starting
    {action_respond_info("Starting preparation for Z-offset calibration")}
    {action_respond_info("Heating hotend to 150C and bed to %d" % (BED_TEMP))}
    
    # Start heating process
    M104 S150                          # Set hotend to 150C
    M140 S{BED_TEMP}                   # Set bed temperature
    
    # Check if QGL needs to be performed
    {% if not printer.quad_gantry_level.applied %}
        STATUS_LEVELING
        QUAD_GANTRY_LEVEL              # Your macro handles the two-pass system
        
        # Home Z after leveling
        STATUS_HOMING
        G28 Z
    {% endif %}
    
    # Wait for temperatures after QGL
    M190 S{BED_TEMP}                   # Wait for bed temp
    M109 S150                          # Wait for hotend temp
    
    # Begin calibration
    PROBE_CALIBRATE_BASE               # Start calibration
    TESTZ Z=-4                         # Move to initial Z position
    
    RESTORE_GCODE_STATE NAME=STATE_PROBE_CALIBRATE
    STATUS_READY

[gcode_macro SHAPER_CALIBRATE]
description: Input Shaper auto-calibration
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                             # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        G28 Z                          # Home Z if only Z is unhomed
    {% endif %}
    
    # Get bed dimensions and probe offsets
    {% set x_size = printer.configfile.settings.stepper_x.position_max|float %}
    {% set y_size = printer.configfile.settings.stepper_y.position_max|float %}
    {% set probe_x_offset = printer.configfile.settings.probe.x_offset|float %}
    {% set probe_y_offset = printer.configfile.settings.probe.y_offset|float %}
    
    # Calculate center point, accounting for probe offset
    {% set center_x = (x_size / 2) - probe_x_offset %}
    {% set center_y = (y_size / 2) - probe_y_offset %}
    
    # Move to center of bed and safe Z height in one command
    G90
    G1 X{center_x} Y{center_y} Z30 F3000
    
    # Perform shaper calibration
    SHAPER_CALIBRATE AXIS=both
